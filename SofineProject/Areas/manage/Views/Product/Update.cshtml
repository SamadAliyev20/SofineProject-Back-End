@model Product
@{
    ViewData["Title"] = "Update";
}

<div class="row justify-content-start">
    <div class="col-lg-2">
        <h1 class="h3 mb-4 text-gray-800">Product Update Page</h1>
    </div>
</div>
<div class="row justify-content-start">
    <div class="col-lg-4">
        <form method="post" enctype="multipart/form-data">
            <div class="form-group">
                <label asp-for="Title" class="form-label"></label>
                <input asp-for="Title" class="form-control">
                <span class="text text-danger" asp-validation-for="Title"></span>
            </div>
            <div class="form-group">
                <label asp-for="Price" class="form-label"></label>
                <input asp-for="Price" class="form-control">
                <span class="text text-danger" asp-validation-for="Price"></span>
            </div>
            <div class="form-group">
                <label asp-for="DiscountedPrice" class="form-label"></label>
                <input asp-for="DiscountedPrice" class="form-control">
                <span class="text text-danger" asp-validation-for="DiscountedPrice"></span>
            </div>
            <div class="form-group">
                <label asp-for="Count" class="form-label"></label>
                <input asp-for="Count" class="form-control">
                <span class="text text-danger" asp-validation-for="Count"></span>
            </div>
            <div class="mb-3">
                <label asp-for="MainFile" class="form-label">Main Image</label>
                <input asp-for="MainFile" class="form-control" accept="image/jpeg">
                <span class="text text-danger" asp-validation-for="MainFile"></span>
            </div>
            <div class="mb-3">
                <label asp-for="HoverFile" class="form-label">Hover Image</label>
                <input asp-for="HoverFile" class="form-control" accept="image/jpeg">
                <span class="text text-danger" asp-validation-for="HoverFile"></span>
            </div>
            <div class="mb-3">
                <label asp-for="Files" class="form-label">Product Images</label>
                <input asp-for="Files" class="form-control" accept="image/jpeg">
                <span class="text text-danger" asp-validation-for="Files"></span>
            </div>
            <div class="row  justify-content-between productImages">
                @await Html.PartialAsync("_ProductImagePartial",Model.ProductImages)
			</div>
            <div class="form-group">
                <label asp-for="ShortDescription">Short Description</label>
                <textarea class="form-control" asp-for="ShortDescription" rows="3"></textarea>
            </div>
            <div class="form-group">
                <label asp-for="LongDescription">Long Description</label>
                <textarea class="form-control" asp-for="LongDescription" rows="3"></textarea>
            </div>
            <div id="parentList">
                <div class="input-group mb-3">
                    <select asp-for="CategoryId" class="custom-select" asp-items="new SelectList(ViewBag.Categories,nameof(Category.Id),nameof(Category.Name))">
                    </select>
                    <span class="text text-danger" asp-validation-for="CategoryId"></span>
                </div>
                <div class="input-group mb-3">
                    <select asp-for="ProductTypeId" class="custom-select" asp-items="new SelectList(ViewBag.ProductTypes,nameof(ProductType.Id),nameof(ProductType.Name))">
                    </select>
                    <span class="text text-danger" asp-validation-for="ProductTypeId"></span>
                </div>
            </div>
            <button type="submit" class="btn btn-primary mt-1">Submit</button>
        </form>
    </div>
</div>
@section Scripts
    {
    @await Html.PartialAsync("_Validation")
    <script src="https://cdn.ckeditor.com/ckeditor5/36.0.1/classic/ckeditor.js"></script>
    <script>
        class MyUploadAdapter {
            constructor(loader) {
                // The file loader instance to use during the upload.
                this.loader = loader;
            }

            // Starts the upload process.
            upload() {
                return this.loader.file
                    .then(file => new Promise((resolve, reject) => {
                        this._initRequest();
                        this._initListeners(resolve, reject, file);
                        this._sendRequest(file);
                    }));
            }

            // Aborts the upload process.
            abort() {
                if (this.xhr) {
                    this.xhr.abort();
                }
            }

            // Initializes the XMLHttpRequest object using the URL passed to the constructor.
            _initRequest() {
                const xhr = this.xhr = new XMLHttpRequest();

                // Note that your request may look different. It is up to you and your editor
                // integration to choose the right communication channel. This example uses
                // a POST request with JSON as a data structure but your configuration
                // could be different.
                xhr.open('POST', 'http://example.com/image/upload/path', true);
                xhr.responseType = 'json';
            }

            // Initializes XMLHttpRequest listeners.
            _initListeners(resolve, reject, file) {
                const xhr = this.xhr;
                const loader = this.loader;
                const genericErrorText = `Couldn't upload file: ${file.name}.`;

                xhr.addEventListener('error', () => reject(genericErrorText));
                xhr.addEventListener('abort', () => reject());
                xhr.addEventListener('load', () => {
                    const response = xhr.response;

                    // This example assumes the XHR server's "response" object will come with
                    // an "error" which has its own "message" that can be passed to reject()
                    // in the upload promise.
                    //
                    // Your integration may handle upload errors in a different way so make sure
                    // it is done properly. The reject() function must be called when the upload fails.
                    if (!response || response.error) {
                        return reject(response && response.error ? response.error.message : genericErrorText);
                    }

                    // If the upload is successful, resolve the upload promise with an object containing
                    // at least the "default" URL, pointing to the image on the server.
                    // This URL will be used to display the image in the content. Learn more in the
                    // UploadAdapter#upload documentation.
                    resolve({
                        default: response.url
                    });
                });

                // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
                // properties which are used e.g. to display the upload progress bar in the editor
                // user interface.
                if (xhr.upload) {
                    xhr.upload.addEventListener('progress', evt => {
                        if (evt.lengthComputable) {
                            loader.uploadTotal = evt.total;
                            loader.uploaded = evt.loaded;
                        }
                    });
                }
            }

            // Prepares the data and sends the request.
            _sendRequest(file) {
                // Prepare the form data.
                const data = new FormData();

                data.append('upload', file);

                // Important note: This is the right place to implement security mechanisms
                // like authentication and CSRF protection. For instance, you can use
                // XMLHttpRequest.setRequestHeader() to set the request headers containing
                // the CSRF token generated earlier by your application.

                // Send the request.
                this.xhr.send(data);
            }
        }
        function MyCustomUploadAdapterPlugin(editor) {
            editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                // Configure the URL to the upload script in your back-end here!
                return new MyUploadAdapter(loader);
            };
        }
        ClassicEditor
            .create(document.querySelector('#LongDescription'), {
                extraPlugins: [MyCustomUploadAdapterPlugin],
                toolbar: ['heading', '|', 'bold', 'italic', 'link', '|', 'bulletedList', 'numberedList', 'imageUpload', '|', 'undo', 'redo']
            })
        ClassicEditor
            .create(document.querySelector('#ShortDescription'), {
                extraPlugins: [MyCustomUploadAdapterPlugin],
                toolbar: ['heading', '|', 'bold', 'italic', 'link', '|', 'bulletedList', 'numberedList', 'imageUpload', '|', 'undo', 'redo']
            })
            .catch(error => {
                console.error(error);
            });
    </script>

}